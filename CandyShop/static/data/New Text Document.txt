#include<stdio.h>
#include<stdlib.h>
#include<math.h>

#include <windows.h>
#include <glut.h>

#define pi (2*acos(0.0))

double cameraHeight;
double cameraAngle;
int drawgrid;
int drawaxes;
int drawcone = 0;
int drawcircle = 0;
double angle;

double angle_x=0;
double angle_increment=0;
double rotation_increase=0;

double translate_x,translate_y,translate_z;
double value_x =1,value_y =1,value_z=1;

double translateX = 0,translateY = 0,translateZ = 0;

bool X=true,Y=true,Z=true;

double scale_x =1,scale_y =1;

int camera_up_x, camera_up_y, camera_up_z;
double camera_look_x, camera_look_y, camera_look_z;

struct point
{
    double x,y,z;
};


void drawAxes()
{
    if(drawaxes==1)
    {
        glColor3f(1.0, 1.0, 1.0);
        glBegin(GL_LINES);
        {
            glVertex3f( 100,0,0);
            glVertex3f(-100,0,0);

            glVertex3f(0,-100,0);
            glVertex3f(0, 100,0);

            glVertex3f(0,0, 100);
            glVertex3f(0,0,-100);
        }
        glEnd();
    }
}


void drawGrid()
{
    int i;
    if(drawgrid==1)
    {
        glColor3f(0.6, 0.6, 0.6);	//grey
        glBegin(GL_LINES);
        {
            for(i=-8; i<=8; i++)
            {

                if(i==0)
                    continue;	//SKIP the MAIN axes

                //lines parallel to Y-axis
                glVertex3f(i*10, -90, 0);
                glVertex3f(i*10,  90, 0);

                //lines parallel to X-axis
                glVertex3f(-90, i*10, 0);
                glVertex3f( 90, i*10, 0);
            }
        }
        glEnd();
    }
}



void drawCircle(double radius)
{
    int i;
    double t, shade;
    struct point points[10000];
    glColor3f(0.7,0.7,0.7);
    //generate points
    for(t = 0, i = 0; t <= 1; i++, t += 0.001)
    {
        points[i].x = radius*cos(2*pi*t);
        points[i].y = radius*sin(2*pi*t);
    }
    int num_of_points = i - 1;
    //draw segments using generated points
    for(i = 0, t = 0; i < num_of_points; i++, t += 0.001)
    {
        //if(i < num_of_points/2) shade = 2*t;
        //else shade = 2*(1.0-t);
        glColor3f(1,0,1);

        glBegin(GL_LINES);
        {
            glVertex3f(points[i].x,points[i].y,0);
            glVertex3f(points[i+1].x,points[i+1].y,0);
        }
        glEnd();
    }
}

void drawCone(double radius,double height)
{
    int i;
    double t, shade;
    struct point points[10000];
    glColor3f(0.7,0.7,0.7);
    //generate points
    for(t = 0, i = 0; t <= 1; i++, t += 0.001)
    {
        points[i].x = radius*cos(2*pi*t);
        points[i].y = radius*sin(2*pi*t);
    }
    //draw triangles using generated points
    int num_of_points = i - 1;
    for(i = 0, t = 0; i < num_of_points; i++, t += 0.001)
    {
        //create shading effect
        if(i < num_of_points/2)
            shade = 2*t;
        else
            shade = 2*(1.0 - t);
        glColor3f(shade,0,shade);

        glBegin(GL_TRIANGLES);
        {
            glVertex3f(0,0,height);
            glVertex3f(points[i].x,points[i].y,0);
            glVertex3f(points[i+1].x,points[i+1].y,0);
        }
        glEnd();
    }
}


void drawCube(double a)
{
    for (double h = -a/2; h <= a/2; h += (a/100000))
    {
        glBegin(GL_QUADS);
        {
            glVertex3f(a/2, a/2, h);
            glVertex3f(a/2, -a/2, h);
            glVertex3f(-a/2, -a/2, h);
            glVertex3f(-a/2, a/2, h);
        }
        glEnd();
    }
}


void drawCylinder(double radius, double height)
{
    int i;
    double t, shade;
    struct point points[10000];
    for(i = 0, t = 0; t <= 1; i++, t += 0.001)
    {
        points[i].x = radius*cos(2*pi*t);
        points[i].y = radius*sin(2*pi*t);
    }
    int num_of_points = i - 1;
    for(i = 0, t = 0; i < num_of_points; i++, t += 0.001)
    {
        //create shading effect
        if(i < num_of_points/2)
            shade = 2*t;
        else
            shade = 2*(1.0 - t);
        glColor3f(shade,0,shade);

        glBegin(GL_QUADS);
        {
            glVertex3f(points[i].x,points[i].y,0);
            glVertex3f(points[i+1].x,points[i+1].y,0);
            glVertex3f(points[i+1].x,points[i+1].y,height);
            glVertex3f(points[i].x,points[i].y,height);
        }
        glEnd();

        glBegin(GL_TRIANGLES);
        {
            glVertex3f(0, 0, 0);
            glVertex3f(points[i].x,points[i].y,0);
            glVertex3f(points[i+1].x,points[i+1].y,0);

            glVertex3f(0, 0, height);
            glVertex3f(points[i].x,points[i].y,height);
            glVertex3f(points[i+1].x,points[i+1].y,height);
        }
        glEnd();

        /*glBegin(GL_LINES);
        {
            glVertex3f(points[i].x,points[i].y,0);
            glVertex3f(points[i].x,points[i].y,height);
        }
        glEnd();*/
    }
}

void for_X(bool option,double value)
{
    bool *temp_move;
    double *temp_translate,*temp_value;

    temp_translate=&translateX;
    temp_move=&X;
    temp_value=&value_x;

    double translate = *temp_translate;
    bool move1 = *temp_move;
    if(translate == 0)
    {
        *temp_value = value;
        *temp_translate +=1;

        *temp_move= option;
        //printf("%s", option ? "true" : "false");
    }
    else if(translate >0&&move1 == !option)
    {
        *temp_translate -=1;
    }
    else
    {
        *temp_translate +=1;
        *temp_move= option;
    }
}
void for_y(bool option,double value)
{
    bool *temp_move;
    double *temp_translate,*temp_value;
    temp_translate=&translateY;
    temp_move=&Y;
    temp_value=&value_y;

    double translate = *temp_translate;
    bool move1 = *temp_move;

    if(translate >0 && move1 == !option)
    {
        *temp_translate -=1;
    }
    else if(translate == 0)
    {
        *temp_value = value;
        *temp_translate +=1;
        *temp_move= option;
    }
    else
    {
        *temp_translate +=1;
        *temp_move= option;
    }
}
void for_z(bool option,double value)
{
    bool *temp_move;
    double *temp_translate,*temp_value;
    temp_translate=&translateZ;
    temp_move=&Z;
    temp_value=&value_z;

    double translate = *temp_translate;
    bool move1 = *temp_move;
    if(translate == 0)
    {
        *temp_value = value;
        *temp_translate +=1;
        *temp_move= option;
    }
    else if(translate >0 && move1 == !option)
    {
        *temp_translate -=1;
    }
    else
    {
        *temp_translate +=1;
        *temp_move= option;

    }
}

void drawSphere(double radius)
{
    struct point points[100][100];
    int i,j;
    double h,r, t1, t2;
    //generate points
    for(t1 = 0, i = 0; t1 <= 1; i++, t1 += 0.01)
    {
        h=radius*sin((pi/2)*t1);
        r=radius*cos((pi/2)*t1);
        for(t2 = 0, j = 0; t2 <= 1; j++, t2 += 0.01)
        {
            points[i][j].x = r*cos(2*pi*t2);
            points[i][j].y = r*sin(2*pi*t2);
            points[i][j].z = h;
        }
    }
    int num_of_stacks = i - 1;
    int num_of_points = j - 1;
    //draw quads using generated points
    for(t1 = 0, i = 0; i < num_of_stacks; i++, t1 += 0.01)
    {
        glColor3f(t1,t1,t1);
        for(t2 = 0, j = 0; j <= num_of_points; j++, t2 += 0.01)
        {
            //if (i == 5 && j == 5) glColor3f(1, 0, 0);
            glBegin(GL_QUADS);
            {
                //upper hemisphere
                glColor3f(0,0,1);
                glVertex3f(points[i][j].x,points[i][j].y,points[i][j].z);
                glVertex3f(points[i][j+1].x,points[i][j+1].y,points[i][j+1].z);
                glVertex3f(points[i+1][j+1].x,points[i+1][j+1].y,points[i+1][j+1].z);
                glVertex3f(points[i+1][j].x,points[i+1][j].y,points[i+1][j].z);
                //lower hemisphere
                glColor3f(1,0,0);
                glVertex3f(points[i][j].x,points[i][j].y,-points[i][j].z);
                glVertex3f(points[i][j+1].x,points[i][j+1].y,-points[i][j+1].z);
                glVertex3f(points[i+1][j+1].x,points[i+1][j+1].y,-points[i+1][j+1].z);
                glVertex3f(points[i+1][j].x,points[i+1][j].y,-points[i+1][j].z);
            }
            glEnd();
        }
    }
}

void keyboardListener(unsigned char key, int x,int y)
{
    switch(key)
    {

    case '1':
        drawgrid=1-drawgrid;
        break;
    case '2':
        drawcone = 1 - drawcone;
        break;

    case 'w':
        //camera_look_x += 3.0;
        rotation_increase +=.8;


        break;
    case 's':
        //camera_look_y += 3.0;
        rotation_increase -=.8;


        break;
    case 'y':

        scale_x +=1;
        //glScalef(scale_x,scale_y,1);
        break;
    case 'u':
        scale_x -=1;
        //glScalef(scale_x,scale_y,1);
        break;

    case 'i':
        scale_y +=1;
        //glScalef(scale_x,scale_y,1);
        break;
    case 'o':
        scale_y -=1;
        //glScalef(scale_x,scale_y,1);
        break;
    default:
        break;
    }
}


void specialKeyListener(int key, int x,int y)
{
    switch(key)
    {
    case GLUT_KEY_DOWN:		//down arrow key
        //y
        for_y(false,-1);
        break;
    case GLUT_KEY_UP:		// up arrow key
        //y

        for_y(true,1);
        break;

    case GLUT_KEY_RIGHT://x-axix

        for_X(false,-1);
        break;
    case GLUT_KEY_LEFT://x-axix
        for_X(true,1);
        break;

    case GLUT_KEY_PAGE_UP:
        break;
    case GLUT_KEY_PAGE_DOWN:
        break;

    case GLUT_KEY_INSERT:
        camera_up_x = 0;
        camera_up_y = 0;
        camera_up_z = 1;
        break;

    case GLUT_KEY_HOME:
        camera_up_x = 1;
        camera_up_y = 0;
        camera_up_z = 0;
        break;
    case GLUT_KEY_END:
        camera_up_x = 0;
        camera_up_y = 1;
        camera_up_z = 0;
        break;

    default:
        break;
    }
}


void mouseListener(int button, int state, int x, int y) 	//x, y is the x-y of the screen (2D)
{
    switch(button)
    {
    case GLUT_LEFT_BUTTON:
        if(state == GLUT_DOWN)
        {
            for_z(false,-1);//z
        }

        break;

    case GLUT_RIGHT_BUTTON://z

        if(state == GLUT_DOWN)
        {
            for_z(true,1);//z
        }
        break;

    case GLUT_MIDDLE_BUTTON:
        //........
        break;

    default:
        break;
    }
}


void display()
{

    //clear the display
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glClearColor(0,0,0,0);	//color black
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    /********************
    / set-up camera here
    ********************/
    //load the correct matrix -- MODEL-VIEW matrix
    glMatrixMode(GL_MODELVIEW);

    //initialize the matrix
    glLoadIdentity();

    //now give three info
    //1. where is the camera (viewer)?
    //2. where is the camera looking?
    //3. Which direction is the camera's UP direction?

    //gluLookAt(100,100,100,	0,0,0,	0,0,1);
    gluLookAt(200*cos(cameraAngle), 200*sin(cameraAngle), cameraHeight,   0,0,0,    0,0,1);
    //gluLookAt(0,0,200,	0,0,0,	0,1,0);


    //again select MODEL-VIEW
    glMatrixMode(GL_MODELVIEW);


    /****************************
    / Add your objects from here
    ****************************/
    //add objects
    drawAxes();
    drawGrid();
    //if (drawcircle == 1)
    //glColor3f(1, 0, 0);
    //double a = 30;
    //glScalef(2, 4, 0.5);
    //glBegin(GL_QUADS);{
      //  glVertex3f(a/2, a/2, 50);
        //glVertex3f(a/2, -a/2, 50);
        //glVertex3f(-a/2, -a/2, 50);
        //glVertex3f(-a/2, a/2, 50);
    //}glEnd();
    glPushMatrix();
    {
        glColor3f(1, 1, 1);
    double valx=90;
    glBegin(GL_POLYGON);{
        glVertex3f(-valx, -valx, valx);
        glVertex3f(-valx, -valx, -valx);
        glVertex3f(valx, -valx, -valx);
        glVertex3f(valx, -valx, valx);
    }glEnd();
    double valy=100;
    glBegin(GL_POLYGON);{
        glVertex3f(-valy, -valy, valy);
        glVertex3f(-valy, -valy, -valy);
        glVertex3f(-valy, valy, -valy);
        glVertex3f(-valy, valy, valy);
    }glEnd();
    }
    glPopMatrix();
//    glPushMatrix();
//    glTranslatef(translate_x1, 0, 0);
//    drawCircle(30);
//    glPopMatrix();
//
//    glTranslatef(translate_x2, 0, 0);
//    drawCircle(30);
    //if (drawcone == 1)
    //    drawCone(30, 40);
    //drawCone(30, 40);
    //if (move_sphere == 1)
    //glTranslatef(translate_x, 0, 0);

    //int dis=1;
    //printf("%dst display",dis++);
    glScalef(scale_x,scale_y,1);
    glTranslatef(translate_x, translate_y, translate_z);
    glRotatef(angle_x, 1, 0, 0);


    drawSphere(40);
    //glRotatef(angle, 0, 0, 1);
    //drawCylinder(30, 40);
    //glColor3f(1, 0, 1);
    //drawCube(30);


    //ADD this line in the end --- if you use double buffer (i.e. GL_DOUBLE)
    glutSwapBuffers();
}


void animate()
{
    angle_x += rotation_increase;

    translate_x += translateX*value_x;
    translate_y += translateY*value_y;
    translate_z += translateZ*value_z;

    if (translate_x >= 100 )
    {

        value_x = -1;
       // translate_x =-100;
    }
    else if ( translate_x <= -100)
    {
        value_x = 1;
        translate_x =100;
    }

    if (translate_y >= 100 )
    {
        value_y = -1;
        //translate_y=-100;
    }
    else if ( translate_y <= -100)
    {
        value_y = 1;
         translate_y=100;
    }

    if (translate_z >= 100 )
    {
        value_z = -1;
    }
    else if ( translate_z <= -100)
    {
        value_z = 1;
    }

//    double distance = fabs(translate_x1 - translate_x2);
//    if(distance <= 60){
//        increment_x1 =-increment_x1;
//        increment_x2 =-increment_x2;
//    }
    //codes for any changes in Models, Camera
    glutPostRedisplay();
}

void init()
{
    //codes for initialization
    //int init=1;
    //printf("%dst init",init++);
    drawgrid=1;
    drawaxes=1;
    cameraHeight=150.0;
    cameraAngle=1.0;
    angle=0;
    translate_x=translate_y=translate_z=0;
    angle_x=0;

    camera_up_x = camera_up_y = 0;
    camera_up_z = 1;
    camera_look_x = camera_look_y = camera_look_z = 0;

    //clear the screen
    glClearColor(0,0,0,0);

    /************************
    / set-up projection here
    ************************/
    //load the PROJECTION matrix
    glMatrixMode(GL_PROJECTION);

    //initialize the matrix
    glLoadIdentity();

    //give PERSPECTIVE parameters
    gluPerspective(80,	1,	1,	1000.0);
    //field of view in the Y (vertically)
    //aspect ratio that determines the field of view in the X direction (horizontally)
    //near distance
    //far distance
}

int main(int argc, char **argv)
{
    glutInit(&argc,argv);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(0, 0);
    glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGB);	//Depth, Double buffer, RGB color

    glutCreateWindow("My OpenGL Program");

    init();

    glEnable(GL_DEPTH_TEST);	//enable Depth Testing

    glutDisplayFunc(display);	//display callback function
    glutIdleFunc(animate);		//what you want to do in the idle time (when no drawing is occuring)

    glutKeyboardFunc(keyboardListener);
    glutSpecialFunc(specialKeyListener);
    glutMouseFunc(mouseListener);

    glutMainLoop();		//The main loop of OpenGL

    return 0;
}
